#!/usr/bin/python

import signal, sys, os, time
import random
import hashlib
import secret

def alarm(time):
    def handler(signum, frame):
        print 'Timeout'
        exit()
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(time)
     

if __name__ == '__main__':
    sys.dont_write_bytecode = True
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    sys.stdin = os.fdopen(sys.stdin.fileno(), 'r', 0)
    alarm(60)

    # prime
    p = 262603487816194488181258352326988232210376591996146252542919605878805005469693782312718749915099841408908446760404481236646436295067318626356598442952156854984209550714670817589388406059285064542905718710475775121565983586780136825600264380868770029680925618588391997934473191054590812256197806034618157751903
 
    # password is a bunch of integer
    password = secret.password
    assert(len(password) == 10)
    assert(all(0 < i <= 20 for i in password))
    password = [int(hashlib.sha512(str(i)).hexdigest(), 16) for i in password]

    FLAG = int(secret.FLAG.strip().encode('hex'), 16)
    
    key = 0
    for i, pwd in enumerate(password):
	
        # Diffie Hellman and g is generated by the password
        print 'Round', i+1
        g = pow(pwd, 2, p)
        
        b = random.randint(2, p)
        B = pow(g, b ,p)    
        print "Server sends:", B

        A = int(raw_input("Generate 'a' and send A = g^a mod p to the server: "))
        assert(514 <= A < p-514)

        K = pow(A, b, p)
        key ^= int(hashlib.sha512(str(K)).hexdigest(), 16)

    print 'FLAG is:', key ^ FLAG
